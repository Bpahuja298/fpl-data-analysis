# -*- coding: utf-8 -*-
"""fpl_values.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bbUVuE92hfPFwdchmsbeLJNNqS-Aa5Z8
"""

import requests
import pandas as pd
import numpy as np

url = 'https://fantasy.premierleague.com/api/bootstrap-static/'
r= requests.get(url)

json = r.json()

json.keys()

"""Build a DataFrame from your API request response
Once we build our dataframes, we’ll be able to work with the data and do things like sort, filter, map (similar to a v-lookup in Excel), and organize our data into a pivot table.

So let’s start by building our dataframes:
"""

elements_df = pd.DataFrame(json['elements'])
elements_types_df = pd.DataFrame(json['element_types'])
teams_df = pd.DataFrame(json['teams'])
element_stats_df = pd.DataFrame(json['element_stats'])

elements_df.head()

elements_df.columns

elements_types_df.columns

teams_df.columns

elements_types_df.head()

teams_df.head()

element_stats_df.columns

element_stats_df

slim_elements_df = elements_df[['second_name','team','element_type','selected_by_percent','now_cost','minutes','transfers_in','value_season','total_points']]

slim_elements_df.head()

"""**Step 4: Working with the Dataframe**"""

# USING MAP
# The first thing I’m going to do is map the position name from the elements_type_df to the slim_elements_df .

slim_elements_df['position'] = slim_elements_df.element_type.map(elements_types_df.set_index('id').singular_name)

# Now that we’ve done that, take a look at the top few rows:

slim_elements_df.head()

# Great, now we can easily see the position. This will come in handy when we organize value_season by position.

# Next, let’s add the team name. We can do that by mapping “name” from our teams_df:

slim_elements_df['team'] = slim_elements_df.team.map(teams_df.set_index('id').name)

slim_elements_df.head()

"""Next, let’s sort this table by value_season"""

slim_elements_df['value'] = slim_elements_df.value_season.astype(float)

slim_elements_df.head()

# now we can sort on value col

# Using sort_values()

slim_elements_df.sort_values('value',ascending=False).head(10)

# slim_elements_df.loc[slim_elements_df['second_name'] == 'Haaland']
# https://www.statology.org/pandas-select-rows-based-on-column-values/

# value is simply calculated by dividing total_points by now_cost .

# value = points / cost

"""Next, we’ll create a pivot_table on the column position , and look at value-by-position:


"""

slim_elements_df.pivot_table(index='position',values='value',aggfunc=np.mean).reset_index()
# After creating the pivot_table and assigning the pivot_table to the variable pivot , we’ll sort the pivot table descending by value:

pivot = slim_elements_df.pivot_table(index='position',values='value',aggfunc=np.mean).reset_index()
pivot.sort_values('value',ascending=False)

"""Interesting. One of the two highest-value players in the game is a goalkeeper, yet the goalkeeper position contributes the lowest value on average. I think this is likely because all the goalkeepers that play 0 minutes. bring down the average of the starters.

To address this, let’s remove all the players from our dataframe that have zero minutes this season. We’ll use loc[] for the first time:
"""

# Using .loc[]

# .loc lets you locate specific rows that have specific column values.
# It’s like filtering a spreadsheet on a specific value in a column.

# For our current purposes, we want to locate all rows in our dataframe that have a
# value greater than zero so as to remove all values = 0. We aren’t just doing this for keepers.
# We need to do this for every position. We write:

slim_elements_df = slim_elements_df.loc[slim_elements_df.value > 0]

# Now let’s run that pivot table back again:

pivot = slim_elements_df.pivot_table(index='position',values='value',aggfunc=np.mean).reset_index()

# and then:

pivot.sort_values('value',ascending=False)

# Now let’s do a different type of pivot table next.
# This time, we’ll look at which teams are providing the most value this year.
# The only things that need to change about this pivot_table statement are the index and the pivot_table variable. Take a look:

team_pivot = slim_elements_df.pivot_table(index='team',values='value',aggfunc=np.mean).reset_index()

# Now we’ll display the team_pivot sorted, from the highest value team to the lowest:

team_pivot.sort_values('value',ascending=False)

#Using .hist()

# Next, let’s look at a histogram distribution of value by position.
# Before we do that, we’ll create some filtered dataframes for each position. We will use .loc again to accomplish this:

fwd_df = slim_elements_df.loc[slim_elements_df.position == 'Forward']
mid_df = slim_elements_df.loc[slim_elements_df.position == 'Midfielder']
def_df = slim_elements_df.loc[slim_elements_df.position == 'Defender']
goal_df = slim_elements_df.loc[slim_elements_df.position == 'Goalkeeper']

# Then, we’ll use the .hist() method on our goal_df.value dataframe column:

goal_df.head()

goal_df.value.hist()

goal_df.sort_values('value',ascending=False).head(20)

def_df.value.hist()

"""Our defensive histogram points out something interesting. Notice the difference between the goalkeeper histogram and the defender histogram?

For a goalkeeper, there is a “best” choice, but we don’t really know who that is going to be starting the season. It turns out, goalkeeper selection was pretty forgiving seeing how many goalkeepers offered value between 20 and 26:
"""

def_df.sort_values('value',ascending=False).head(20)

mid_df.value.hist()

mid_df.sort_values('value',ascending=False).head(20)

fwd_df.sort_values('value', ascending=False).head(20)

fwd_df.value.hist()

"""Export to CSV"""

# Before we go, I wanted to show you how to export to a CSV that you can work with in Google Sheets or Excel.

# It’s simple:

slim_elements_df.to_csv('fpl_data.csv')

# Run that cell and Boom! Done. Nice job :)

# Now have fun exploring the data in Google Sheets or Excel, if that’s your thing.

